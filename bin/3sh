#!/usr/bin/env ruby1.9 -rubygems
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))
require 'trith'

BANNER = "Usage: #{File.basename($0)} [options] [files...]"

case
  when %w(-V -v --version).any? { |opt| ARGV.include?(opt) }
    $stdout.puts Trith::VERSION.to_s
    exit
  when %w(-? -h --help).any? { |opt| ARGV.include?(opt) }
    $stdout.puts BANNER
    exit
end

begin
  $machine = Trith::Machine.new
  $cache   = Trith::Cache.load_core
  Trith::Shell.setup!($cache)
  Trith::Shell::History.load!

  if %w(-d --debug).any? { |opt| ARGV.include?(opt) }
    $machine.execute_hook = proc do
      $stdout.puts Trith::Shell.inspect($machine, :prefix => '.. ')
    end
  end

  while line = Trith::Shell.readline('>> ')
    unless (line = line.strip).empty?
      case line
        # Operator lookup
        when /^\?\s*(\S*)/, 'help'
          filter = ($1.to_s).empty? ? nil : /#{Regexp.quote($1)}/
          $cache.each_function do |function|
            if !filter || filter =~ function.label
              puts "%-24s%s" % [function.label, function.comment]
            end
          end
          next # skip inspecting the stack

        # Operator definition
        when /^:\s*(\S*)\s+(.*)$/
          Trith::Shell::History.push(": #{$1} #{$2}")
          name, code = $1.to_sym, Trith::Reader.read_all($2)
          $machine.define!(name, *code)
          next # skip inspecting the stack

        # Code execution
        else
          Trith::Shell::History.push(line)
          begin
            $machine.execute(Trith::Reader.read_all(line))
          rescue Trith::Machine::InvalidOperatorError => e
            $stderr.puts Trith::Shell.format_error(e)
          rescue Trith::Machine::InvalidOperandError => e
            $stderr.puts Trith::Shell.format_error(e)
          rescue Trith::Machine::StackUnderflowError => e
            $stderr.puts Trith::Shell.format_error("stack underflow")
          rescue => e
            $stderr.puts Trith::Shell.format_error(e.inspect)
          end
      end
    end
    $stdout.puts Trith::Shell.inspect($machine, :prefix => '=> ')
  end

  $stdout.puts
rescue Interrupt
  abort '' # abort due to ^C (SIGINT)
ensure
  Trith::Shell::History.dump!
end
